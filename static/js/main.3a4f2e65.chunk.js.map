{"version":3,"sources":["assets/sounds/boop.mp3","assets/sounds/stressedBoop.mp3","components/BeatsContainer.tsx","components/BPMController.tsx","components/BeatsAmountController.tsx","components/TapTempo.tsx","components/ContainerComponent.tsx","App.tsx","index.tsx"],"names":["BeatsContainer","beats","activeId","isStressed","className","map","num","classes","push","join","BPMController","updateIntervalsValue","intervalValue","useState","bpm","setBPM","rangeRef","useRef","useEffect","bpmFromInterval","current","value","toString","handleControllers","n","prev","Math","round","onClick","event","type","min","max","ref","onChange","e","currentTarget","BeatsAmountController","updateBeats","length","amount","setAmount","beatsOperations","concat","slice","cb","newArr","TapTempo","taps","setTaps","tapIntervals","setTapIntervals","calculateIntervals","calculatedInterval","reduceArrayWithAttenuation–°oefficient","arr","reduce","obj","i","acc","coeffSum","intervalsArray","forEach","item","interval","splice","updateIntervalsArray","array","maxLength","updateValue","tap","Date","now","rest","soundPath","require","stressedSoundPath","ContainerComponent","beatsFromLocalstorage","localStorage","getItem","JSON","parse","checkLocalstorageBeats","setBeats","setActiveId","isActive","setIsActive","intervalFromLocalstorage","checkLocalstorageInterval","setintervalValue","timeout","setTimeout","setIsStressed","sound","Audio","default","stressedSound","window","addEventListener","key","setItem","stringify","intervalCallback","actual","play","playSound","clearInterval","setInterval","checked","App","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iJAAA,OAAe,cAA0B,kC,gCCAzC,OAAe,cAA0B,0C,0ICkC1BA,EA1BuC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAiBtE,OACI,qBAAKC,UAAU,aAAf,SACI,oBAAIA,UAAU,WAAd,SAhBGH,EAAMI,KAAI,SAACC,GACd,IAAMC,EAAU,CAAC,QAOjB,OANID,IAAQJ,GACRK,EAAQC,KAAK,cAEL,IAARF,GAAaH,GACbI,EAAQC,KAAK,gBAEV,oBAAcJ,UAAWG,EAAQE,KAAK,KAAtC,SACH,yBADYH,WC2EbI,EAvFqC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,qBAAsBC,EAAoB,EAApBA,cAAoB,EACvEC,mBAAwB,MAD+C,mBACtFC,EADsF,KACjFC,EADiF,KAIvFC,EAAWC,iBAAyB,MAE1CC,qBAAU,WACN,GAAqB,MAAjBN,EAAuB,CACvB,IAAIO,EAAkB,IAAQP,EAAgB,EAC9CI,EAASI,QAASC,MAAQF,EAAgBG,WAC1CP,EAAOI,MAEZ,CAACP,IAEJM,qBAAU,WACK,MAAPJ,IACAE,EAASI,QAASC,MAAQP,EAAIQ,WAC9BX,EAAqB,KAASG,EAAM,OAEzC,CAACA,IAEJ,IAIMS,EAAoB,SACbC,GAGDT,EAFiBD,EAAOU,EAxBb,MA6BR,SAAAC,GAAI,OAAIA,EAAQD,KAPzBD,EAAoB,SASbC,GAGDT,EAFiBD,EAAOU,EAjCb,QAsCR,SAAAC,GAAI,OAAIA,EAAQD,KAI/B,OACI,qCACI,+BAAKE,KAAKC,MAAMb,GAAhB,UACA,sBAAKV,UAAU,uBAAf,UACI,qBACIA,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAA2B,KAFjD,iBAMA,qBACInB,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAA2B,IAFjD,SAII,mBAAGnB,UAAU,iBAAb,sBAGJ,mBAAGA,UAAU,cAAb,SACI,uBACI0B,KAAK,QACLC,IA7DG,GA8DHC,IA/DG,IAgEHC,IAAKjB,EACLkB,SA9CK,SAACC,GACtBpB,GAAQoB,EAAEC,cAAcf,YAgDhB,qBACIjB,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAA2B,IAFjD,SAII,mBAAGnB,UAAU,iBAAb,mBAEJ,qBACIA,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAA2B,KAFjD,wBCtBDc,EAtDqD,SAAC,GAG9D,IAFHC,EAEE,EAFFA,YACArC,EACE,EADFA,MACE,EAC0BY,mBAAiBZ,EAAMsC,QADjD,mBACKC,EADL,KACaC,EADb,KAKFvB,qBAAU,WACNuB,EAAUxC,EAAMsC,UACjB,CAACtC,IAEJ,IAAMyC,EAAkB,WAEhB,OARkB,KAQdF,EACOvC,EAEJA,EAAM0C,OAAO1C,EAAMsC,SAL5BG,EAAkB,WAQhB,OAfkB,IAedF,EACOvC,EAEJA,EAAM2C,MAAM,EAAG3C,EAAMsC,OAAS,IAIvChB,EAAoB,SAACsB,GACvB,IAAMC,EAAmBD,IACzBP,EAAYQ,GACZL,EAAUxC,EAAMsC,SAGpB,OACI,mCACI,sBAAKnC,UAAU,uBAAf,UACI,qBACIA,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAAkBmB,IAFxC,SAII,mBAAGtC,UAAU,iBAAb,sBAEJ,oBAAIA,UAAU,KAAd,SAAoBoC,IACpB,qBACIpC,UAAU,yDACVwB,QAAS,SAAAC,GAAK,OAAIN,EAAkBmB,IAFxC,SAII,mBAAGtC,UAAU,iBAAb,yB,eCsCL2C,EAtF2B,SAAC,GAA8B,IAA5BpC,EAA2B,EAA3BA,qBAA2B,EAC5CE,mBAAmB,IADyB,mBAC7DmC,EAD6D,KACvDC,EADuD,OAE5BpC,mBAAmB,IAFS,mBAE7DqC,EAF6D,KAE/CC,EAF+C,KAIpEjC,qBAAU,WACNkC,EAAmBJ,KACpB,CAACA,IAEJ9B,qBAAU,WACN,IAAMmC,EAAqBC,EAAsCJ,GAC7DG,GACA1C,EAAqB0C,KAE1B,CAACH,IAEJ,IAeMI,EAAwC,SAACC,GAC3C,IAAMlC,EAAQkC,EAAIC,QAAO,SACrBC,EACArC,EACAsC,GAIA,MAAO,CACHC,IAHgBF,EAAIE,IAAMvC,GAAWsC,EAAI,GAIzCE,SAHmBH,EAAIG,SAAWF,EAAI,KAK3C,CACCC,IAAK,EACLC,SAAU,IAEd,OAAOvC,EAAMsC,IAAMtC,EAAMuC,UAGvBR,EAAqB,SAACG,GACxB,IAAMM,EAA2B,GAEjCN,EAAIO,SAAQ,SAACC,EAAML,EAAGH,GAClB,GAAU,IAANG,EAAJ,CAGA,IAAMM,EAAWD,EAAOR,EAAIG,EAAI,GAE5BM,EAAW,KAAOA,EAAW,MAC7BH,EAAeI,OAAO,EAAGJ,EAAetB,QACxCU,EAAQ,KAERiB,EAAqBL,EAAgB,EAAGG,OAGhDb,EAAgB,GAAD,OAAKU,KAGlBK,EAAuB,SAACC,EAAiBC,EAAmBC,GAC1DF,EAAM5B,OAAS6B,EACfD,EAAM3D,KAAK6D,GAEXF,EAAMF,OAAO,EAAG,EAAGI,IAI3B,OACI,wBACIzC,QA/DU,WACd,IAAM0C,EAAMC,KAAKC,MACjB,GAAIxB,EAAKT,OAAS,EACdU,EAAQ,GAAD,mBAAKD,GAAL,CAAWsB,SACf,CAAC,IACQG,EADT,YACiBzB,GADjB,SAEHC,EAAQ,GAAD,mBAAKwB,GAAL,CAAWH,OA0DlBlE,UAAU,4DAFd,wBC9EFsE,EAAYC,EAAQ,IACpBC,EAAoBD,EAAQ,IAgKnBE,EA9J0B,WAAO,IAAD,EACnBhE,oBAAmB,kBA2B7C,WACE,IAAMiE,EAAwBC,aAAaC,QAAQ,SACnD,OAA6B,MAAzBF,EACKG,KAAKC,MAAMJ,GAEX,CAAC,EAAG,EAAG,EAAG,GAhC8BK,MADN,mBACtClF,EADsC,KAC/BmF,EAD+B,OAEbvE,mBAAwB,MAFX,mBAEtCX,EAFsC,KAE5BmF,EAF4B,OAGbxE,oBAAkB,GAHL,mBAGtCyE,EAHsC,KAG5BC,EAH4B,OAIH1E,oBAAwB,kBAelE,WACE,IAAM2E,EAA2BT,aAAaC,QAAQ,YACtD,OAAgC,MAA5BQ,GACMA,EAED,IApB6DC,MAJ3B,mBAItC7E,EAJsC,KAIvB8E,EAJuB,OAKf7E,mBAAc,GALC,mBAKtC8E,EALsC,KAK7BC,EAL6B,OAMT/E,oBAAkB,GANT,mBAMtCV,EANsC,KAM1B0F,EAN0B,KAQvCC,EAAQ,IAAIC,MAAMrB,EAAUsB,SAC5BC,EAAgB,IAAIF,MAAMnB,EAAkBoB,SAuDlD9E,qBAAU,WA1BRgF,OAAOC,iBAAiB,YAAY,SAAAhE,GACpB,MAAVA,EAAEiE,KAAyB,UAAVjE,EAAEiE,KACrBb,GAAY,SAAA9D,GAAI,OAAKA,KACjB6D,GACFD,EAAY,OAEK,YAAVlD,EAAEiE,KAA+B,MAAVjE,EAAEiE,IACb,MAAjBxF,IACF8E,GAAiB,SAAAjE,GAAI,OAAIA,EAAQ,KACjCsD,aAAasB,QAAQ,WAAYzF,EAAcU,aAE9B,cAAVa,EAAEiE,KAAiC,MAAVjE,EAAEiE,IACf,MAAjBxF,IACF8E,GAAiB,SAAAjE,GAAI,OAAIA,EAAQ,KACjCsD,aAAasB,QAAQ,WAAYzF,EAAcU,aAE9B,cAAVa,EAAEiE,KAAiC,MAAVjE,EAAEiE,KACpChB,GAAS,SAAA3D,GAAI,OAAIA,EAAKmB,MAAM,EAAGnB,EAAKc,OAAS,MAC7CwC,aAAasB,QAAQ,QAASpB,KAAKqB,UAAUrG,KAC1B,eAAVkC,EAAEiE,KAAkC,MAAVjE,EAAEiE,MACrChB,GAAS,SAAA3D,GAAI,OAAIA,EAAKkB,OAAOlB,EAAKc,WAClCwC,aAAasB,QAAQ,QAASpB,KAAKqB,UAAUrG,UAOhD,IAEH,IAAMsG,EAAmB,WACvB,IAAIC,EAAS,KACbnB,GAAY,SAAAnF,GACV,OACEsG,EADEtG,GAAaD,EAAMsC,OAAS,GAAkB,OAAbrC,EAC1B,EAGFA,EAAY,KAhEP,SAACsG,GACbrG,GAAyB,IAAXqG,EAChBP,EAAcQ,OAEdX,EAAMW,OA+DRC,CAAUF,IAGZtF,qBAAU,WAWR,OAVIoE,GAAwB,IAAZK,GACdgB,cAAchB,GACdC,EAAWM,OAAOU,YAAYL,EAAkB3F,KACvC0E,GAAwB,IAAZK,EACrBC,EAAWM,OAAOU,YAAYL,EAAkB3F,IACtC0E,IACVqB,cAAchB,GACdC,EAAW,IAGN,kBAAMe,cAAchB,MAC1B,CAACL,EAAUnF,EAAYD,EAAUU,IAEpC,IAOMD,EAAuB,SAACU,GAC5BqE,EAAiBrE,GACjB0D,aAAasB,QAAQ,WAAYhF,EAAMC,aAUzC,OACE,sBAAKlB,UAAU,wBAAf,UACE,qEACA,wBACEwB,QAvBgB,SAACC,GACrB0D,GAAY,SAAA9D,GAAI,OAAKA,KACjB6D,GACFD,EAAY,OAqBVjF,UACEkF,EACI,4DACA,sDALR,SAQGA,EAAW,OAAS,UAEvB,cAAC,EAAD,CACE3E,qBAAsBA,IAGxB,cAAC,EAAD,CACEA,qBAAsBA,EACtBC,cAAeA,IAEjB,sBAAKR,UAAU,OAAf,UACE,kCACE,uBACE0B,KAAK,WACL+E,QAAS1G,EACT+B,SAAU,WA7BlB2D,GAAc,SAAApE,GAAI,OAAKA,QA+BjB,sDAEF,cAAC,EAAD,CACEa,YAvCY,SAACjB,GACnB+D,EAAS/D,GACT0D,aAAasB,QAAQ,QAASpB,KAAKqB,UAAUjF,KAsCvCpB,MAAOA,OAIX,cAAC,EAAD,CACEA,MAAOA,EACPC,SAAUA,EACVC,WAAYA,QC7JC2G,E,4JACnB,WACE,OACE,qBAAK1G,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJyB2G,IAAMC,WCCvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3a4f2e65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/boop.adb635a2.mp3\";","export default __webpack_public_path__ + \"static/media/stressedBoop.4cab99db.mp3\";","import React from 'react'\r\n\r\ntype BeatsContainerProps = {\r\n    beats: number[]\r\n    activeId: number|null\r\n    isStressed: boolean\r\n}\r\n\r\nconst BeatsContainer: React.FC<BeatsContainerProps> = ({ beats, activeId, isStressed }) => {\r\n\r\n    const beatBlocks = () => {\r\n        return beats.map((num) => {\r\n            const classes = ['beat']\r\n            if (num === activeId) {\r\n                classes.push('activeBeat')\r\n            }\r\n            if (num === 0 && isStressed) {\r\n                classes.push('stressedBeat')\r\n            }\r\n            return <li key={num} className={classes.join(' ')}>\r\n                <div></div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"beatsBlock\">\r\n            <ul className='beats_ul'>\r\n                {beatBlocks()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BeatsContainer; ","import React, { useState, useEffect, useRef } from 'react'\r\n\r\ntype BPMControllerProps = {\r\n    updateIntervalsValue(value: number): void,\r\n    intervalValue: number | null;\r\n}\r\n\r\nconst BPMController: React.FC<BPMControllerProps> = ({ updateIntervalsValue, intervalValue }) => {\r\n    const [bpm, setBPM] = useState<number | null>(null);\r\n    const maxBpm: number = 260;\r\n    const minBpm: number = 20;\r\n    const rangeRef = useRef<HTMLInputElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (intervalValue != null) {\r\n            let bpmFromInterval = 60000 / intervalValue + 1;\r\n            rangeRef.current!.value = bpmFromInterval.toString();\r\n            setBPM(bpmFromInterval)\r\n        }\r\n    }, [intervalValue])\r\n\r\n    useEffect(() => {\r\n        if (bpm != null) {\r\n            rangeRef.current!.value = bpm.toString();\r\n            updateIntervalsValue(60000 / (bpm - 1));\r\n        }\r\n    }, [bpm])\r\n\r\n    const changeBpmByRange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setBPM(+e.currentTarget.value);\r\n    }\r\n\r\n    const handleControllers = {\r\n        decrease(n: number) {\r\n            const decreasedBpm = bpm! - n;\r\n            if (decreasedBpm < minBpm) {\r\n                setBPM(minBpm)\r\n                return\r\n            }\r\n            setBPM(prev => prev! - n)\r\n        },\r\n        increase(n: number) {\r\n            const increasedBpm = bpm! + n;\r\n            if (increasedBpm > maxBpm) {\r\n                setBPM(maxBpm)\r\n                return\r\n            }\r\n            setBPM(prev => prev! + n)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>{Math.round(bpm!)} BPM</h3>\r\n            <div className=\"controllersContainer\">\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers.decrease(10)}\r\n                >\r\n                    -10\r\n                </div>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers.decrease(1)}\r\n                >\r\n                    <i className=\"material-icons\">remove</i>\r\n                </div>\r\n\r\n                <p className=\"range-field\">\r\n                    <input\r\n                        type=\"range\"\r\n                        min={minBpm}\r\n                        max={maxBpm}\r\n                        ref={rangeRef}\r\n                        onChange={changeBpmByRange}\r\n                    />\r\n                </p>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers.increase(1)}\r\n                >\r\n                    <i className=\"material-icons\">add</i>\r\n                </div>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers.increase(10)}\r\n                >\r\n                    +10\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BPMController","import React, { useState, useEffect } from 'react'\r\n\r\ntype BeatsAmountControllerProps = {\r\n    beats: number[]\r\n    updateBeats(value: number[]): void\r\n}\r\n\r\nconst BeatsAmountController: React.FC<BeatsAmountControllerProps> = ({\r\n    updateBeats,\r\n    beats,\r\n}) => {\r\n    const [amount, setAmount] = useState<number>(beats.length);\r\n    const minAmount: number = 2;\r\n    const maxAmount: number = 12;\r\n\r\n    useEffect(() => {\r\n        setAmount(beats.length)\r\n    }, [beats])\r\n\r\n    const beatsOperations = {\r\n        increase(): number[] {\r\n            if (amount === maxAmount) {\r\n                return beats\r\n            }\r\n            return beats.concat(beats.length)\r\n        },\r\n        decrease(): number[] {\r\n            if (amount === minAmount) {\r\n                return beats\r\n            }\r\n            return beats.slice(0, beats.length - 1)\r\n        }\r\n    }\r\n\r\n    const handleControllers = (cb: () => number[]) => {\r\n        const newArr: number[] = cb();\r\n        updateBeats(newArr);\r\n        setAmount(beats.length);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"controllersContainer\">\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(beatsOperations.decrease)}\r\n                >\r\n                    <i className=\"material-icons\">remove</i>\r\n                </div>\r\n                <h5 className=\"m5\">{amount}</h5>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(beatsOperations.increase)}\r\n                >\r\n                    <i className=\"material-icons\">add</i>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BeatsAmountController","import React, { useState, useEffect } from 'react'\r\n\r\ntype TapTempoProps = {\r\n    updateIntervalsValue(value: number): void\r\n}\r\n\r\nconst TapTempo: React.FC<TapTempoProps> = ({ updateIntervalsValue }) => {\r\n    const [taps, setTaps] = useState<number[]>([])\r\n    const [tapIntervals, setTapIntervals] = useState<number[]>([])\r\n\r\n    useEffect(() => {\r\n        calculateIntervals(taps)\r\n    }, [taps])\r\n\r\n    useEffect(() => {\r\n        const calculatedInterval = reduceArrayWithAttenuation–°oefficient(tapIntervals)\r\n        if (calculatedInterval) {\r\n            updateIntervalsValue(calculatedInterval)\r\n        }\r\n    }, [tapIntervals])\r\n\r\n    const handleTap = () => {\r\n        const tap = Date.now()\r\n        if (taps.length < 6) {\r\n            setTaps([...taps, tap])\r\n        } else {\r\n            const [, ...rest] = taps\r\n            setTaps([...rest, tap])\r\n        }\r\n    }\r\n\r\n    // const getTriangularNumber = (n: number): number => {\r\n    //     return (n ** 2 + n) / 2\r\n    //     // return (n != 1) ? n + getTriangularNumber(n - 1) : 1;\r\n    // }\r\n\r\n    const reduceArrayWithAttenuation–°oefficient = (arr: any[]): number => {\r\n        const value = arr.reduce((\r\n            obj: { acc: number, coeffSum: number },\r\n            current: number,\r\n            i: number\r\n        ) => {\r\n            const accumulator = obj.acc + current * (i + 1);\r\n            const coefficientSum = obj.coeffSum + i + 1\r\n            return {\r\n                acc: accumulator,\r\n                coeffSum: coefficientSum,\r\n            }\r\n        }, {\r\n            acc: 0,\r\n            coeffSum: 0,\r\n        })\r\n        return value.acc / value.coeffSum\r\n    }\r\n\r\n    const calculateIntervals = (arr: number[]) => {\r\n        const intervalsArray: number[] = [];\r\n\r\n        arr.forEach((item, i, arr) => {\r\n            if (i === 0) {\r\n                return\r\n            }\r\n            const interval = item - arr[i - 1]\r\n\r\n            if (interval < 230 || interval > 3160) {\r\n                intervalsArray.splice(0, intervalsArray.length)\r\n                setTaps([])\r\n            } else {\r\n                updateIntervalsArray(intervalsArray, 5, interval)\r\n            }\r\n        })\r\n        setTapIntervals([...intervalsArray])\r\n    }\r\n\r\n    const updateIntervalsArray = (array: number[], maxLength: number, updateValue: number) => {\r\n        if (array.length < maxLength) {\r\n            array.push(updateValue)\r\n        } else {\r\n            array.splice(0, 1, updateValue)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={handleTap}\r\n            className='waves-effect waves-light btn-large m5 blue-grey lighten-3'\r\n        >\r\n            Tap Tempo\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TapTempo","import React, { useState, useEffect } from 'react'\r\nimport BeatsContainer from './BeatsContainer'\r\nimport BPMController from './BPMController'\r\nimport BeatsAmountController from './BeatsAmountController'\r\nimport TapTempo from './TapTempo';\r\nconst soundPath = require('../assets/sounds/boop.mp3')\r\nconst stressedSoundPath = require('../assets/sounds/stressedBoop.mp3')\r\n\r\nconst ContainerComponent: React.FC<{}> = () => {\r\n  const [beats, setBeats] = useState<number[]>(() => checkLocalstorageBeats());\r\n  const [activeId, setActiveId] = useState<number | null>(null);\r\n  const [isActive, setIsActive] = useState<boolean>(false);\r\n  const [intervalValue, setintervalValue] = useState<number | null>(() => checkLocalstorageInterval());\r\n  const [timeout, setTimeout] = useState<any>(0);\r\n  const [isStressed, setIsStressed] = useState<boolean>(false);\r\n\r\n  const sound = new Audio(soundPath.default);\r\n  const stressedSound = new Audio(stressedSoundPath.default);\r\n\r\n  const playSound = (actual: number | null) => {\r\n    if (isStressed && actual === 0) {\r\n      stressedSound.play()\r\n    } else {\r\n      sound.play();\r\n    }\r\n  }\r\n\r\n  function checkLocalstorageInterval(): number {\r\n    const intervalFromLocalstorage = localStorage.getItem('interval');\r\n    if (intervalFromLocalstorage != null) {\r\n      return +intervalFromLocalstorage;\r\n    } else {\r\n      return 760;\r\n    }\r\n  }\r\n\r\n  function checkLocalstorageBeats(): number[] {\r\n    const beatsFromLocalstorage = localStorage.getItem('beats');\r\n    if (beatsFromLocalstorage != null) {\r\n      return JSON.parse(beatsFromLocalstorage);\r\n    } else {\r\n      return [0, 1, 2, 3];\r\n    }\r\n  }  \r\n\r\n  const handleKeyEvents = () => {\r\n    window.addEventListener('keypress', e => {\r\n      if (e.key === ' ' || e.key === 'Enter') {\r\n        setIsActive(prev => !prev)\r\n        if (isActive) {\r\n          setActiveId(null)\r\n        }\r\n      } else if (e.key === 'ArrowUp' || e.key === 'w') {\r\n        if (intervalValue != null) {\r\n          setintervalValue(prev => prev! + 1);\r\n          localStorage.setItem('interval', intervalValue.toString())\r\n        }\r\n      } else if (e.key === 'ArrowDown' || e.key === 's') {\r\n        if (intervalValue != null) {\r\n          setintervalValue(prev => prev! - 1);\r\n          localStorage.setItem('interval', intervalValue.toString())\r\n        }\r\n      } else if (e.key === 'ArrowLeft' || e.key === 'a') {\r\n        setBeats(prev => prev.slice(0, prev.length - 1));\r\n        localStorage.setItem('beats', JSON.stringify(beats))\r\n      } else if (e.key === 'ArrowRight' || e.key === 'd') {\r\n        setBeats(prev => prev.concat(prev.length));\r\n        localStorage.setItem('beats', JSON.stringify(beats))\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleKeyEvents();\r\n  }, [])\r\n\r\n  const intervalCallback = () => {\r\n    let actual = null\r\n    setActiveId(activeId => {\r\n      if (activeId! >= beats.length - 1 || activeId === null) {\r\n        actual = 0\r\n        return actual\r\n      }\r\n      actual = activeId! + 1;\r\n      return actual\r\n    });\r\n    playSound(actual)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && timeout !== 0) {\r\n      clearInterval(timeout);\r\n      setTimeout(window.setInterval(intervalCallback, intervalValue!))\r\n    } else if (isActive && timeout === 0) {\r\n      setTimeout(window.setInterval(intervalCallback, intervalValue!))\r\n    } else if (!isActive) {\r\n      clearInterval(timeout);\r\n      setTimeout(0)\r\n    }\r\n\r\n    return () => clearInterval(timeout);\r\n  }, [isActive, isStressed, activeId, intervalValue])\r\n\r\n  const onButtonClick = (event: React.MouseEvent) => {\r\n    setIsActive(prev => !prev)\r\n    if (isActive) {\r\n      setActiveId(null)\r\n    }\r\n  }\r\n\r\n  const updateIntervalsValue = (value: number) => {\r\n    setintervalValue(value)\r\n    localStorage.setItem('interval', value.toString())\r\n  }\r\n  const updateBeats = (value: number[]) => {\r\n    setBeats(value);\r\n    localStorage.setItem('beats', JSON.stringify(value))\r\n  }\r\n  const onToggle = () => {\r\n    setIsStressed(prev => !prev)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mobile-grid-container\">\r\n      <h1>‚ú® Hello fellow musician ‚ú®</h1>\r\n      <button\r\n        onClick={onButtonClick}\r\n        className={\r\n          isActive\r\n            ? 'waves-effect waves-light btn-large m5 blue-grey lighten-3'\r\n            : 'waves-effect waves-light btn-large m5 teal accent-4'\r\n        }\r\n      >\r\n        {isActive ? 'Stop' : 'Start'}\r\n      </button>\r\n      <TapTempo\r\n        updateIntervalsValue={updateIntervalsValue}\r\n      />\r\n\r\n      <BPMController\r\n        updateIntervalsValue={updateIntervalsValue}\r\n        intervalValue={intervalValue}\r\n      />\r\n      <div className='flex'>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isStressed}\r\n            onChange={() => onToggle()}\r\n          />\r\n          <span>Stress 1st beat</span>\r\n        </label>\r\n        <BeatsAmountController\r\n          updateBeats={updateBeats}\r\n          beats={beats}\r\n        />\r\n      </div>\r\n\r\n      <BeatsContainer\r\n        beats={beats}\r\n        activeId={activeId}\r\n        isStressed={isStressed} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContainerComponent;","import React from 'react'\r\nimport './App.css';\r\nimport ContainerComponent from './components/ContainerComponent';\r\n\r\nexport default class App extends React.Component<{}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ContainerComponent />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}