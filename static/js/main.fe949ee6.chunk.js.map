{"version":3,"sources":["assets/sounds/boop.mp3","assets/sounds/stressedBoop.mp3","components/BeatsContainer.tsx","components/BPMController.tsx","components/BeatsAmountController.tsx","components/TapTempo.tsx","components/ContainerComponent.tsx","App.tsx","index.tsx"],"names":["BeatsContainer","beats","activeId","isStressed","className","map","num","classes","push","join","BPMController","updateIntervalsValue","intervalValue","useState","bpm","setBPM","maxBpm","rangeRef","useRef","useEffect","console","log","current","value","toString","handleControllers","event","action","prev","minBpm","onClick","type","min","max","ref","onChange","e","currentTarget","BeatsAmountController","updateBeats","length","amount","setAmount","increasedArr","concat","decreasedArr","slice","TapTempo","taps","setTaps","tapIntervals","setTapIntervals","calculateIntervals","calculatedInterval","reduceArrayWithAttenuation–°oefficient","arr","reduce","obj","i","acc","coeffSum","intervalsArray","forEach","item","interval","splice","updateIntervalsArray","array","maxLength","updateValue","tap","Date","now","rest","soundPath","require","stressedSoundPath","ContainerComponent","setBeats","setActiveId","isActive","setIsActive","setintervalValue","timeout","setTimeout","setIsStressed","sound","Audio","default","stressedSound","intervalCallback","actual","play","playSound","clearInterval","window","setInterval","screen","width","checked","App","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iJAAA,OAAe,cAA0B,kC,gCCAzC,OAAe,cAA0B,0C,0ICkC1BA,EA1BuC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAiBtE,OACI,qBAAKC,UAAU,aAAf,SACI,oBAAIA,UAAU,WAAd,SAhBGH,EAAMI,KAAI,SAACC,GACd,IAAMC,EAAU,CAAC,QAOjB,OANID,IAAQJ,GACRK,EAAQC,KAAK,cAEL,IAARF,GAAaH,GACbI,EAAQC,KAAK,gBAEV,oBAAcJ,UAAWG,EAAQE,KAAK,KAAtC,SACH,yBADYH,WCkFbI,EA9FqC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,qBAA0C,KAApBC,cACnDC,mBAAiB,KADsD,mBACtFC,EADsF,KACjFC,EADiF,KAEvFC,EAAiB,IAEjBC,EAAWC,iBAAyB,MAO1CC,qBAAU,WACNC,QAAQC,IAAI,wBAAyBP,GACrCG,EAASK,QAASC,MAAQT,EAAIU,WAC9Bb,EAAqB,KAASG,EAAM,MACrC,CAACA,IAEJ,IAIMW,EAAoB,SAACC,EAAyBC,GAChD,OAAQA,GACJ,IAAK,aACD,GAAIb,GAAOE,IAEP,YADAD,EAAOC,GAGXD,GAAO,SAAAa,GAAI,OAAIA,EAAO,MACtB,MACJ,IAAK,aACD,GAAId,GAAOe,GAEP,YADAd,EA7BO,IAgCXA,GAAO,SAAAa,GAAI,OAAIA,EAAO,MACtB,MACJ,IAAK,WACD,GAAId,IAAQE,EACR,OAEJD,GAAO,SAAAa,GAAI,OAAIA,EAAO,KACtB,MACJ,IAAK,WACD,GAzCW,KAyCPd,EACA,OAEJC,GAAO,SAAAa,GAAI,OAAIA,EAAO,OAKlC,OACI,qCACI,+BAAKd,EAAL,UACA,sBAAKV,UAAU,uBAAf,UACI,qBACIA,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,eAF/C,iBAMA,qBACItB,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,aAF/C,SAII,mBAAGtB,UAAU,iBAAb,sBAEJ,mBAAGA,UAAU,cAAb,SACI,uBACI2B,KAAK,QACLC,IApEG,GAqEHC,IAAKjB,EACLkB,IAAKjB,EACLkB,SAzDS,SAACC,GAC1BrB,GAAQqB,EAAEC,cAAcd,YA2DhB,qBACInB,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,aAF/C,SAII,mBAAGtB,UAAU,iBAAb,mBAEJ,qBACIA,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,eAF/C,wBChCDY,EAnDqD,SAAC,GAG9D,IAFHC,EAEE,EAFFA,YACAtC,EACE,EADFA,MACE,EAC0BY,mBAAiBZ,EAAMuC,QADjD,mBACKC,EADL,KACaC,EADb,KAKIjB,EAAoB,SAACC,EAAyBC,GAEhD,OADAP,QAAQC,IAAI,oBAAqBM,GACzBA,GACJ,IAAK,WACD,GANc,KAMVc,EACA,OAEJ,IAAIE,EAAyB1C,EAAM2C,OAAO3C,EAAMuC,QAChDD,EAAYI,GACZD,GAAU,SAAAd,GAAI,OAAIA,EAAO,KACzB,MACJ,IAAK,WACD,GAfc,IAeVa,EACA,OAEJ,IAAMI,EAAyB5C,EAAM6C,MAAM,EAAG7C,EAAMuC,OAAS,GAC7DD,EAAYM,GACZH,GAAU,SAAAd,GAAI,OAAIA,EAAO,OAKrC,OACI,mCACI,sBAAKxB,UAAU,uBAAf,UACI,qBACIA,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,aAF/C,SAII,mBAAGtB,UAAU,iBAAb,sBAEJ,6BAAKqC,IACL,qBACIrC,UAAU,yDACV0B,QAAS,SAAAJ,GAAK,OAAID,EAAkBC,EAAO,aAF/C,SAII,mBAAGtB,UAAU,iBAAb,yB,eCsCL2C,EAnF2B,SAAC,GAA8B,IAA5BpC,EAA2B,EAA3BA,qBAA2B,EAC5CE,mBAAmB,IADyB,mBAC7DmC,EAD6D,KACvDC,EADuD,OAE5BpC,mBAAmB,IAFS,mBAE7DqC,EAF6D,KAE/CC,EAF+C,KAIpEhC,qBAAU,WACNiC,EAAmBJ,KACpB,CAACA,IAEJ7B,qBAAU,WACN,IAAMkC,EAAqBC,EAAsCJ,GAC7DG,IACA1C,EAAqB0C,GACrBjC,QAAQC,IAAI,uCAAwCgC,MAGzD,CAACH,IAEJ,IAUMI,EAAwC,SAACC,GAC3C,IAAMhC,EAAQgC,EAAIC,QAAO,SACrBC,EACAnC,EACAoC,GAIA,MAAO,CACHC,IAHgBF,EAAIE,IAAMrC,GAAWoC,EAAI,GAIzCE,SAHmBH,EAAIG,SAAWF,EAAI,KAK3C,CACCC,IAAK,EACLC,SAAU,IAEd,OAAOrC,EAAMoC,IAAMpC,EAAMqC,UAGvBR,EAAqB,SAACG,GACxB,IAAMM,EAA2B,GAEjCN,EAAIO,SAAQ,SAACC,EAAML,EAAGH,GAClB,GAAU,IAANG,EAAJ,CAGA,IAAMM,EAAWD,EAAOR,EAAIG,EAAI,GAE5BM,EAAW,KAAOA,EAAW,MAC7BH,EAAeI,OAAO,EAAGJ,EAAerB,QACxCS,EAAQ,KAERiB,EAAqBL,EAAgB,EAAGG,OAGhDb,EAAgB,GAAD,OAAKU,KAGlBK,EAAuB,SAACC,EAAiBC,EAAmBC,GAC1DF,EAAM3B,OAAS4B,EACfD,EAAM3D,KAAK6D,GAEXF,EAAMF,OAAO,EAAG,EAAGI,IAI3B,OACI,wBACIvC,QA1DU,WACd,IAAMwC,EAAMC,KAAKC,MACjB,GAAIxB,EAAKR,OAAS,EACdS,EAAQ,GAAD,mBAAKD,GAAL,CAAWsB,SACf,CAAC,IACQG,EADT,YACiBzB,GADjB,SAEHC,EAAQ,GAAD,mBAAKwB,GAAL,CAAWH,OAqDlBlE,UAAU,4DAFd,wBC3EFsE,EAAYC,EAAQ,IACpBC,EAAoBD,EAAQ,IAuHnBE,EArH0B,WAAO,IAAD,EACnBhE,mBAAmB,CAAC,EAAG,EAAG,EAAG,IADV,mBACtCZ,EADsC,KAC/B6E,EAD+B,OAEbjE,mBAAwB,MAFX,mBAEtCX,EAFsC,KAE5B6E,EAF4B,OAGblE,oBAAkB,GAHL,mBAGtCmE,EAHsC,KAG5BC,EAH4B,OAIHpE,mBAAiB,GAJd,mBAItCD,EAJsC,KAIvBsE,EAJuB,OAKfrE,mBAAc,GALC,mBAKtCsE,EALsC,KAK7BC,EAL6B,OAMTvE,oBAAkB,GANT,mBAMtCV,EANsC,KAM1BkF,EAN0B,KAQvCC,EAAQ,IAAIC,MAAMb,EAAUc,SAC5BC,EAAgB,IAAIF,MAAMX,EAAkBY,SAU5CE,EAAmB,WACvB,IAAIC,EAAS,KACbZ,GAAY,SAAA7E,GACV,OACEyF,EADEzF,GAAaD,EAAMuC,OAAS,GAAkB,OAAbtC,EAC1B,EAGFA,EAAY,KAfP,SAACyF,GACbxF,GAAyB,IAAXwF,EAChBF,EAAcG,OAEdN,EAAMM,OAcRC,CAAUF,IAGZxE,qBAAU,WAWR,OAVI6D,GAAwB,IAAZG,GACdW,cAAcX,GACdC,EAAWW,OAAOC,YAAYN,EAAkB9E,KACvCoE,GAAwB,IAAZG,EACrBC,EAAWW,OAAOC,YAAYN,EAAkB9E,IACtCoE,IACVc,cAAcX,GACdC,EAAW,IAGN,kBAAMU,cAAcX,MAC1B,CAACH,EAAU7E,EAAYD,EAAUU,IAEpC,IAOMD,EAAuB,SAACY,GAC5B2D,EAAiB3D,IASnB,OACE,mCACIwE,OAAOE,OAAOC,MAAQ,IACpB,qCACA,0EACA,uBACA,oEACA,oDAAsB,wCAAtB,4CAEA,qCACA,qEACA,wBACEpE,QA7BY,SAACJ,GACrBuD,GAAY,SAAArD,GAAI,OAAKA,KACjBoD,GACFD,EAAY,OA2BN3E,UACG4E,EAEG,4DADA,sDAJR,SAQIA,EAAqB,OAAV,UAEf,cAAC,EAAD,CACErE,qBAAsBA,IAGxB,cAAC,EAAD,CACEA,qBAAsBA,EACtBC,cAAeA,IAEjB,sBAAKR,UAAU,OAAf,UACE,kCACE,uBACE2B,KAAK,WACLoE,QAAShG,EACTgC,SAAU,WArCtBkD,GAAc,SAAAzD,GAAI,OAAKA,QAuCb,sDAEF,cAAC,EAAD,CACEW,YA9CQ,SAAChB,GACnBuD,EAASvD,IA8CCtB,MAAOA,OAIX,cAAC,EAAD,CACEA,MAAOA,EACPC,SAAUA,EACVC,WAAYA,UClHHiG,E,uKAEjB,OACE,qBAAKhG,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJyBiG,IAAMC,WCCvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fe949ee6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/boop.adb635a2.mp3\";","export default __webpack_public_path__ + \"static/media/stressedBoop.4cab99db.mp3\";","import React from 'react'\r\n\r\ntype BeatsContainerProps = {\r\n    beats: number[]\r\n    activeId: number|null\r\n    isStressed: boolean\r\n}\r\n\r\nconst BeatsContainer: React.FC<BeatsContainerProps> = ({ beats, activeId, isStressed }) => {\r\n\r\n    const beatBlocks = () => {\r\n        return beats.map((num) => {\r\n            const classes = ['beat']\r\n            if (num === activeId) {\r\n                classes.push('activeBeat')\r\n            }\r\n            if (num === 0 && isStressed) {\r\n                classes.push('stressedBeat')\r\n            }\r\n            return <li key={num} className={classes.join(' ')}>\r\n                <div></div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"beatsBlock\">\r\n            <ul className='beats_ul'>\r\n                {beatBlocks()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BeatsContainer; ","import React, { useState, useEffect, useRef } from 'react'\r\n\r\ntype BPMControllerProps = {\r\n    updateIntervalsValue(value: number): void,\r\n    intervalValue:number\r\n}\r\n\r\nconst BPMController: React.FC<BPMControllerProps> = ({ updateIntervalsValue, intervalValue }) => {\r\n    const [bpm, setBPM] = useState<number>(80);\r\n    const maxBpm: number = 260;\r\n    const minBpm: number = 20;\r\n    const rangeRef = useRef<HTMLInputElement>(null)\r\n\r\n    // useEffect(() => {\r\n    //     let interval = 60/intervalValue+1\r\n    //     setBPM(interval)\r\n    // },[intervalValue])\r\n\r\n    useEffect(() => {\r\n        console.log('bpm value has changed', bpm);\r\n        rangeRef.current!.value = bpm.toString();\r\n        updateIntervalsValue(60000 / (bpm - 1))\r\n    }, [bpm])\r\n\r\n    const changeIntervalsValue = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setBPM(+e.currentTarget.value);\r\n    }\r\n\r\n    const handleControllers = (event: React.MouseEvent, action: string) => {\r\n        switch (action) {\r\n            case 'increase10':\r\n                if (bpm >= maxBpm - 10) {\r\n                    setBPM(maxBpm)\r\n                    return\r\n                }\r\n                setBPM(prev => prev + 10)\r\n                break;\r\n            case 'decrease10':\r\n                if (bpm <= minBpm + 10) {\r\n                    setBPM(minBpm)\r\n                    return\r\n                }\r\n                setBPM(prev => prev - 10)\r\n                break;\r\n            case 'increase':\r\n                if (bpm === maxBpm) {\r\n                    return\r\n                }\r\n                setBPM(prev => prev + 1)\r\n                break;\r\n            case 'decrease':\r\n                if (bpm === minBpm) {\r\n                    return\r\n                }\r\n                setBPM(prev => prev - 1)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>{bpm} BPM</h3>\r\n            <div className=\"controllersContainer\">\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'decrease10')}\r\n                >\r\n                    -10\r\n                </div>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'decrease')}\r\n                >\r\n                    <i className=\"material-icons\">remove</i>\r\n                </div>\r\n                <p className=\"range-field\">\r\n                    <input\r\n                        type=\"range\"\r\n                        min={minBpm}\r\n                        max={maxBpm}\r\n                        ref={rangeRef}\r\n                        onChange={changeIntervalsValue}\r\n                    />\r\n                </p>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'increase')}\r\n                >\r\n                    <i className=\"material-icons\">add</i>\r\n                </div>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'increase10')}\r\n                >\r\n                    +10\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BPMController","import React, { useState } from 'react'\r\n\r\ntype BeatsAmountControllerProps = {\r\n    beats: number[]\r\n    updateBeats(value: number[]): void\r\n}\r\n\r\nconst BeatsAmountController: React.FC<BeatsAmountControllerProps> = ({\r\n    updateBeats,\r\n    beats,\r\n}) => {\r\n    const [amount, setAmount] = useState<number>(beats.length);\r\n    const minAmount: number = 2;\r\n    const maxAmount: number = 12;\r\n\r\n    const handleControllers = (event: React.MouseEvent, action: string) => {\r\n        console.log('controllers click', action);\r\n        switch (action) {\r\n            case 'increase':\r\n                if (amount === maxAmount) {\r\n                    return\r\n                }\r\n                let increasedArr: number[] = beats.concat(beats.length)\r\n                updateBeats(increasedArr)\r\n                setAmount(prev => prev + 1)\r\n                break;\r\n            case 'decrease':\r\n                if (amount === minAmount) {\r\n                    return\r\n                }\r\n                const decreasedArr: number[] = beats.slice(0, beats.length - 1)\r\n                updateBeats(decreasedArr)\r\n                setAmount(prev => prev - 1)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"controllersContainer\">\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'decrease')}\r\n                >\r\n                    <i className=\"material-icons\">remove</i>\r\n                </div>\r\n                <h5>{amount}</h5>\r\n                <div\r\n                    className='waves-effect waves-light btn-small blue-grey lighten-4'\r\n                    onClick={event => handleControllers(event, 'increase')}\r\n                >\r\n                    <i className=\"material-icons\">add</i>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BeatsAmountController","import React, { useState, useEffect } from 'react'\r\n\r\ntype TapTempoProps = {\r\n    updateIntervalsValue(value: number): void\r\n}\r\n\r\nconst TapTempo: React.FC<TapTempoProps> = ({ updateIntervalsValue }) => {\r\n    const [taps, setTaps] = useState<number[]>([])\r\n    const [tapIntervals, setTapIntervals] = useState<number[]>([])\r\n\r\n    useEffect(() => {\r\n        calculateIntervals(taps)\r\n    }, [taps])\r\n\r\n    useEffect(() => {\r\n        const calculatedInterval = reduceArrayWithAttenuation–°oefficient(tapIntervals)\r\n        if (calculatedInterval) {\r\n            updateIntervalsValue(calculatedInterval)\r\n            console.log('tapTempo has updated intevalValue to', calculatedInterval);\r\n            \r\n        }\r\n    }, [tapIntervals])\r\n\r\n    const handleTap = () => {\r\n        const tap = Date.now()\r\n        if (taps.length < 6) {\r\n            setTaps([...taps, tap])\r\n        } else {\r\n            const [, ...rest] = taps\r\n            setTaps([...rest, tap])\r\n        }\r\n    }\r\n\r\n    const reduceArrayWithAttenuation–°oefficient = (arr: any[]): number => {\r\n        const value = arr.reduce((\r\n            obj: { acc: number, coeffSum: number },\r\n            current: number,\r\n            i: number\r\n        ) => {\r\n            const accumulator = obj.acc + current * (i + 1);\r\n            const coefficientSum = obj.coeffSum + i + 1\r\n            return {\r\n                acc: accumulator,\r\n                coeffSum: coefficientSum,\r\n            }\r\n        }, {\r\n            acc: 0,\r\n            coeffSum: 0,\r\n        })\r\n        return value.acc / value.coeffSum\r\n    }\r\n\r\n    const calculateIntervals = (arr: number[]) => {\r\n        const intervalsArray: number[] = [];\r\n\r\n        arr.forEach((item, i, arr) => {\r\n            if (i === 0) {\r\n                return\r\n            }\r\n            const interval = item - arr[i - 1]\r\n\r\n            if (interval < 230 || interval > 3160) {\r\n                intervalsArray.splice(0, intervalsArray.length)\r\n                setTaps([])\r\n            } else {\r\n                updateIntervalsArray(intervalsArray, 5, interval)\r\n            }\r\n        })\r\n        setTapIntervals([...intervalsArray])\r\n    }\r\n\r\n    const updateIntervalsArray = (array: number[], maxLength: number, updateValue: number) => {\r\n        if (array.length < maxLength) {\r\n            array.push(updateValue)\r\n        } else {\r\n            array.splice(0, 1, updateValue)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={handleTap}\r\n            className='waves-effect waves-light btn-large m5 blue-grey lighten-3'\r\n        >\r\n            Tap Tempo\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TapTempo","import React, { useState, useEffect } from 'react'\r\nimport BeatsContainer from './BeatsContainer'\r\nimport BPMController from './BPMController'\r\nimport BeatsAmountController from './BeatsAmountController'\r\nimport TapTempo from './TapTempo';\r\nconst soundPath = require('../assets/sounds/boop.mp3')\r\nconst stressedSoundPath = require('../assets/sounds/stressedBoop.mp3')\r\n\r\nconst ContainerComponent: React.FC<{}> = () => {\r\n  const [beats, setBeats] = useState<number[]>([0, 1, 2, 3]);\r\n  const [activeId, setActiveId] = useState<number | null>(null);\r\n  const [isActive, setIsActive] = useState<boolean>(false);\r\n  const [intervalValue, setintervalValue] = useState<number>(0);\r\n  const [timeout, setTimeout] = useState<any>(0);\r\n  const [isStressed, setIsStressed] = useState<boolean>(false);\r\n\r\n  const sound = new Audio(soundPath.default);\r\n  const stressedSound = new Audio(stressedSoundPath.default);\r\n\r\n  const playSound = (actual: number | null) => {\r\n    if (isStressed && actual === 0) {\r\n      stressedSound.play()\r\n    } else {\r\n      sound.play();\r\n    }\r\n  }\r\n\r\n  const intervalCallback = () => {\r\n    let actual = null\r\n    setActiveId(activeId => {\r\n      if (activeId! >= beats.length - 1 || activeId === null) {\r\n        actual = 0\r\n        return actual\r\n      }\r\n      actual = activeId! + 1;\r\n      return actual\r\n    });\r\n    playSound(actual)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && timeout !== 0) {\r\n      clearInterval(timeout);\r\n      setTimeout(window.setInterval(intervalCallback, intervalValue))\r\n    } else if (isActive && timeout === 0) {\r\n      setTimeout(window.setInterval(intervalCallback, intervalValue))\r\n    } else if (!isActive) {\r\n      clearInterval(timeout);\r\n      setTimeout(0)\r\n    }\r\n\r\n    return () => clearInterval(timeout);\r\n  }, [isActive, isStressed, activeId, intervalValue])\r\n\r\n  const onButtonClick = (event: React.MouseEvent) => {\r\n    setIsActive(prev => !prev)\r\n    if (isActive) {\r\n      setActiveId(null)\r\n    }\r\n  }\r\n\r\n  const updateIntervalsValue = (value: number) => {\r\n    setintervalValue(value)\r\n  }\r\n  const updateBeats = (value: number[]) => {\r\n    setBeats(value)\r\n  }\r\n  const onToggle = () => {\r\n    setIsStressed(prev => !prev)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { window.screen.width < 768\r\n        ? <>\r\n          <h1>Hello fellow musician ‚ú®‚ú®‚ú®</h1>\r\n          <br />\r\n          <p>Oh, are you using your smartphone? </p>\r\n          <p>Please switch to a <b>desktop</b>. You won't regret it üòâ </p>\r\n        </>\r\n        : <>\r\n          <h1>‚ú® Hello fellow musician ‚ú®</h1>\r\n          <button\r\n            onClick={onButtonClick}\r\n            className={\r\n              !isActive\r\n                ? 'waves-effect waves-light btn-large m5 teal accent-4'\r\n                : 'waves-effect waves-light btn-large m5 blue-grey lighten-3'\r\n            }\r\n          >\r\n            {!isActive ? 'Start' : 'Stop'}\r\n          </button>\r\n          <TapTempo\r\n            updateIntervalsValue={updateIntervalsValue}\r\n          />\r\n\r\n          <BPMController\r\n            updateIntervalsValue={updateIntervalsValue}\r\n            intervalValue={intervalValue}\r\n          />\r\n          <div className='flex'>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isStressed}\r\n                onChange={() => onToggle()}\r\n              />\r\n              <span>Stress 1st beat</span>\r\n            </label>\r\n            <BeatsAmountController\r\n              updateBeats={updateBeats}\r\n              beats={beats}\r\n            />\r\n          </div>\r\n\r\n          <BeatsContainer\r\n            beats={beats}\r\n            activeId={activeId}\r\n            isStressed={isStressed} />\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContainerComponent;","import React from 'react'\r\nimport './App.css';\r\nimport ContainerComponent from './components/ContainerComponent';\r\n\r\nexport default class App extends React.Component<{}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ContainerComponent />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}